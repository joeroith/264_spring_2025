[
  {
    "objectID": "why_quarto.html",
    "href": "why_quarto.html",
    "title": "Why Quarto?",
    "section": "",
    "text": "As described in the quarto documentation: Quarto is a multi-language, next generation version of R Markdown from RStudio, with many new features and capabilities. Like R Markdown, Quarto uses Knitr to execute R code, and is therefore able to render most existing Rmd files without modification.\nData scientists are pretty excited about the introduction of Quarto, and since it represents the future of R Markdown, we will conduct MSCS 264 using Quarto. Intriguing Quarto features that have been cited include:\nHere’s a cool example from the Quarto documentation, showing features like cross-referencing of figures, chunk options using the hash-pipe format, collapsed code, and easy figure legends:",
    "crumbs": [
      "Why Quarto?"
    ]
  },
  {
    "objectID": "why_quarto.html#air-quality",
    "href": "why_quarto.html#air-quality",
    "title": "Why Quarto?",
    "section": "Air Quality",
    "text": "Air Quality\nFigure 1 further explores the impact of temperature on ozone level.\n\n\nCode\nlibrary(ggplot2)\n\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n\n\n\n\n\n\n\n\nFigure 1: Temperature and ozone level.",
    "crumbs": [
      "Why Quarto?"
    ]
  },
  {
    "objectID": "rtipoftheday.html",
    "href": "rtipoftheday.html",
    "title": "R Tip of the Day",
    "section": "",
    "text": "Signup Sheet"
  },
  {
    "objectID": "github_links.html",
    "href": "github_links.html",
    "title": "GitHub Links",
    "section": "",
    "text": "Here are a few additional GitHub links that I’ve found helpful:\n\nUsing git and GitHub with RStudio (Lisa Lendway)\nGitHub with R projects (Lisa Lendway)\nGitHub starter course – basic terminology\nHappy Git and GitHub for the useR (Jenny Bryan)",
    "crumbs": [
      "GitHub Links"
    ]
  },
  {
    "objectID": "finalproject.html",
    "href": "finalproject.html",
    "title": "Final Project: Shiny App",
    "section": "",
    "text": "In this project, you will find data on the web, scrape it, tidy it, visualize it, and then publish it to tell an interactive, data-driven story.",
    "crumbs": [
      "Final Project: Shiny App"
    ]
  },
  {
    "objectID": "finalproject.html#overview",
    "href": "finalproject.html#overview",
    "title": "Final Project: Shiny App",
    "section": "",
    "text": "In this project, you will find data on the web, scrape it, tidy it, visualize it, and then publish it to tell an interactive, data-driven story.",
    "crumbs": [
      "Final Project: Shiny App"
    ]
  },
  {
    "objectID": "finalproject.html#groups",
    "href": "finalproject.html#groups",
    "title": "Final Project: Shiny App",
    "section": "Groups",
    "text": "Groups\nTBD – I will assign pairs with input from you",
    "crumbs": [
      "Final Project: Shiny App"
    ]
  },
  {
    "objectID": "finalproject.html#timeline",
    "href": "finalproject.html#timeline",
    "title": "Final Project: Shiny App",
    "section": "Timeline",
    "text": "Timeline\n\n\n\n\n\n\n\n\n\nTentative Due Date\nPoints\n\n\n\n\nStage 0: Partner Preferences\nTues Nov 12\n1\n\n\nStage I: Proposal\nWed Nov 20\n6\n\n\nStage II: Progress Report\nWed Dec 4\n6\n\n\nStage III: Peer Review\nTues Dec 10\n6\n\n\nStage IV: Project Submission\nSat Dec 14\n75\n\n\nStage V: Project Presentation\nSat Dec 14\n6\n\n\n——————————-\n———————\n——-\n\n\nTotal\n\n100",
    "crumbs": [
      "Final Project: Shiny App"
    ]
  },
  {
    "objectID": "finalproject.html#key-definitions",
    "href": "finalproject.html#key-definitions",
    "title": "Final Project: Shiny App",
    "section": "Key definitions",
    "text": "Key definitions\n\n“Scrape it”. You can find a site with an API and acquire data with httr2; you can find data on a website, in table form or scattered, and acquire it with rvest; or, you can find multiple files in a format like .csv and merge them together with tidyr. You cannot start with a single, nicely-formatted file.\n“Tidy it”. Create a tidy tibble that will allow you to perform desired analyses. This might involve stringr, mutate, filter, spread, parse_, etc.\n“Visualize it”. Create plots using ggplot() that effectively tell a story about what insights can be gained from your data.\n“Publish it”. This should take the form of a Shiny app published with GitHub Pages (or possibly somewhere like shinyapps.io or rconnect.stolaf.edu).",
    "crumbs": [
      "Final Project: Shiny App"
    ]
  },
  {
    "objectID": "finalproject.html#examples-of-good-past-projects",
    "href": "finalproject.html#examples-of-good-past-projects",
    "title": "Final Project: Shiny App",
    "section": "Examples of good past projects",
    "text": "Examples of good past projects\nSee Project folder on the RStudio server.",
    "crumbs": [
      "Final Project: Shiny App"
    ]
  },
  {
    "objectID": "finalproject.html#stage-i-proposal",
    "href": "finalproject.html#stage-i-proposal",
    "title": "Final Project: Shiny App",
    "section": "Stage I: Proposal",
    "text": "Stage I: Proposal\nA max two-page document describing:\n\nWebsite(s) you plan to scrape or data sets you plan to merge\nVariables you plan to acquire, including variables you plan to generate from your raw data\nQuestions you plan to address\nVisualizations you envision (include photos of plot sketches)",
    "crumbs": [
      "Final Project: Shiny App"
    ]
  },
  {
    "objectID": "finalproject.html#stage-ii-progress-report",
    "href": "finalproject.html#stage-ii-progress-report",
    "title": "Final Project: Shiny App",
    "section": "Stage II: Progress Report",
    "text": "Stage II: Progress Report\nA one-page document (not including sketches) describing:\n\nAn update on how your data scraping / acquisition is coming; you should have already put together your primary data set(s)\nUpdates to your proposal – what has changed in terms of websites scraped, variables acquired and generated, questions addressed, sketches of planned visualizations, and format of your final product\nNames of files and links where I can find your R code. At a minimum, you should create 2 qmd files – one for scraping and/or creating a tidy data set (that gets written using write_csv) and one doing plots and analyses (after reading tidy data in with read_csv).",
    "crumbs": [
      "Final Project: Shiny App"
    ]
  },
  {
    "objectID": "finalproject.html#stage-iii-peer-review",
    "href": "finalproject.html#stage-iii-peer-review",
    "title": "Final Project: Shiny App",
    "section": "Stage III: Peer Review",
    "text": "Stage III: Peer Review\nCome prepared to share a draft version of your final product with another team during class. As a reviewer, come prepared to offer comments on how the plots you see could be improved to more effectively convey messages in the data. You might also be called on to share R code or hints on how to modify R code to achieve certain goals.",
    "crumbs": [
      "Final Project: Shiny App"
    ]
  },
  {
    "objectID": "finalproject.html#stage-iv-project-submission",
    "href": "finalproject.html#stage-iv-project-submission",
    "title": "Final Project: Shiny App",
    "section": "Stage IV: Project Submission",
    "text": "Stage IV: Project Submission\nYour submission (one per group) will be simply a link to a Shiny app or website containing your final product, along with directions for accessing your source code in a public GitHub repo. In addition, each individual must complete a short reflection with the following components: (a) an evaluation of the contributions of each team member (including yourself), (b) a description of the biggest challenges and most satisfying triumphs in your project, and (c) a response to your peer review feedback, including changes made in your final project (and why!).\nYour project score will be based on the quality of your team’s Final Product, and your individual contribution to your team, as assessed by all team members (and me). A high quality Final Product will show your abilities to scrape, tidy, and visualize data; illustrate creativity and strong effort; and tell a compelling story with excellent written descriptions and graphics. See rubric for more detail.",
    "crumbs": [
      "Final Project: Shiny App"
    ]
  },
  {
    "objectID": "finalproject.html#stage-v-project-presentation",
    "href": "finalproject.html#stage-v-project-presentation",
    "title": "Final Project: Shiny App",
    "section": "Stage V: Project Presentation",
    "text": "Stage V: Project Presentation\nDuring our final exam period, each group will present their final shiny app. The presentation should be well planned and rehearsed; it should take no more than 8 minutes, with each team member speaking approximately an equal amount. Your goal is to entice your audience to explore your app in greater detail. You should describe your motivation and main questions your app was designed to explore, walk through key features, and navigate your app to illustrate a few key findings. If you discovered a cool new R trick that enhances your project, feel free to share that as well.",
    "crumbs": [
      "Final Project: Shiny App"
    ]
  },
  {
    "objectID": "01_review164.html",
    "href": "01_review164.html",
    "title": "Review of Data Science 1",
    "section": "",
    "text": "Content coming soon!",
    "crumbs": [
      "Review of Data Science 1"
    ]
  },
  {
    "objectID": "github_intro.html",
    "href": "github_intro.html",
    "title": "Intro to GitHub",
    "section": "",
    "text": "Version Control (GitHub)\nIn order to collaborate on an R project (or any coding project in general), data scientists typically use a version control system like GitHub. With GitHub, you never have to save files as Final.docx, Final2.docx, Newfinal.docx, RealFinal.docx, nothisisreallyit.docx, etc. You update code like .qmd and .Rmd and data files, recording descriptions of any changes. Then if you ever want to go back to an earlier version, GitHub can facilitate that. Or if you want to make your work public, others can see it and even suggest changes, but you are ultimately in control of any changes that get made.\nAnd, you can have multiple collaborators with access to the same set of files. While it can be dicey if multiple people have the file open and make changes at the same time; if you do this with GitHub, it is at least POSSIBLE to get it straightened out, and the second person who tries to save will get warned. If you are both just using a common folder on RStudio, you can easily write over and erase each other’s work. (If you use a common folder, be sure that one person is editing at a time to prevent this).\nIn order to begin to get familiar with GitHub, we will use it to create a course folder for you.\n\n\nGetting started on GitHub and connecting to RStudio\n\nCreate a GitHub account at github.com. It’s usually okay to hit “Skip Personalization” at the bottom of the screen after entering an email, username, and password (you might have to enable 2-factor authentication as well). There are a few bonuses you can get as a student that you might consider.\nObtain a personal access token (PAT) in GitHub using the following steps:\n\nClick your profile picture/symbol in the upper right of your GitHub page. Then select Settings &gt; Developer settings &gt; Personal access tokens &gt; Tokens (classic).\nClick “Generate new token (classic)” and give a descriptive name like “My PAT for RStudio”. Note that the default expiration is 30 days; I did a Custom setting through the end of the semester.\nSelect scopes and permissions; I often select: repo, workflow, gist, and user.\nClick “Generate token”. Copy your personal access token and store it somewhere.\n\nStore your credentials in RStudio using the following steps:\n\nIn the console, type library(credentials). You might have to install the credentials package first.\nThen type set_github_pat() and hit Return. You can sign in with the browser, or you can choose the Token option, where you can copy in your personal access token\n\n\nAlert! If the steps in (3) don’t work, you may have to install Git on your computer first. This chapter in “Happy Git with R” provides nice guidance for installing Git. Installing Git for Windows seems to work well on most Windows machines, using this site seems to work well for macOS, and a command like sudo apt-get install git can often work nicely in Linux. Once Git is installed, restart RStudio, and it will usually magically find Git. If not, there’s some good advice in this chapter of “Happy Git with R”. If you ever get frustrated with Git, remember that No one is giving out Git Nerd merit badges! Just muddle through until you figure out something that works for you!\n\n\nCreating an R project (local) that’s connected to GitHub (cloud)\n\nIn your GitHub account, click the \\(+ \\nabla\\) (+down arrow) button near the top right and select New Repository (repo). Put something like “SDS264_F24” for your repository (repo) name; use simple but descriptive names that avoid spaces. Check Private for now; you can turn a repository Public if you want later. Check Add a ReadMe File. Finally hit Create Repository and copy the URL once your repo has been created; the URL should be something like github.com/username/SDS264_F24.\nGo into your RStudio and select File &gt; New Project &gt; Version Control &gt; Git. For the repository URL paste in the URL for the repository you just created. A project directory named “SDS264_F24” will be created in your specified folder (which you can navigate to).\n\nNotice that you are now starting with a blank slate! Nothing in the environment or history. Also note where it says your project name in the top right corner.\nAt this point your should have a GitHub repo called “SDS264_F24” connected to an R project named “SDS264_F24”. The basic framework is set!\n\n\nCreating a personal website in RStudio (local)\n\nYou can download our first file with in-class exercises here. Just hit the Download Raw File button and note where the file is saved on your computer. Use File &gt; Open File in RStudio to open up 01_review164.qmd. Then, use File &gt; Save As to navigate to the SDS264_F24 folder on your computer and save a copy there. (Stay tuned for more on what exactly a “qmd” file is!)\n\n\n\nPushing your work to GitHub (cloud)\n\nWe now want to “push” the changes made in “user_name.github.io” to your GitHub repo (the changes have only been made in your local RStudio for now).\n\nIn the console, type library(credentials)\nThen type set_github_pat(), hit Return, and copy in your personal access token. We do this again because we are in a new project. (These first two steps might not be necessary, but it’s good to make sure.)\nunder the Git tab in the Environment panel, check the boxes in front of all modified files to “stage” your changes. To select a large number of files, check the top box, scroll down to the bottom of the list, and then shift-click the final box\nclick the Commit tab to “commit” your changes (like saving a file locally) along with a message describing the changes you made. GitHub guides you by by showing your old code (red) and new code (green), to make sure you approve of the changes. This first time, all code should be green since we’ve only added new things rather than modifying previously saved files.\n“push” your changes to GitHub (an external website) by clicking the green Up arrow. Refresh your GitHub account to see new files in the user_name.github.io repo!\n\n\n\n\nModifying files that have already been pushed to GitHub\n\nMake and save a change (anything) to your file 01_review164.qmd in RStudio. Now go back under the Git tab and “push” these new changes to GitHub. You’ll have to go through the same process of Stage, Commit, and Push, although this time you’ll see only your newest changes in green when you Commit. Confirm that your changes appear in GitHub.\n\n\n\nPulling work from GitHub\nBefore you start a new session of working on a project in RStudio, you should always Pull changes from GitHub first. Most of the time there will be nothing new, but if a collaborator made changes since the last time you worked on a file, you want to make sure you’re working with the latest and greatest version. If not, you’ll end up trying to Push changes made to an old version, and GitHub will balk and produce Merge Conflict messages. We’ll see how to handle Merge Conflicts later, but it’s a bit of a pain and best avoided!\n\nGo into 01_review164.qmd on GitHub and hit the Edit icon. Add a line anywhere, and then scroll down to hit Commit Changes. (This is not recommended and for illustrative purposes only! You will likely never edit directly in GitHub, but we’re emulating what might happen if a collaborator makes changes since the last time you worked on a document.) Now go back to RStudio and, under the Git tab, “Pull” the changes from GitHub into your R project folder. (Use the blue Down arrow). Confirm that your changes now appear in RStudio. Before you start working on the R server, you should always Pull any changes that might have been made on GitHub (especially if you’re working on a team!), since things can get dicey if you try to merge new changes from RStudio with new changes on GitHub.\n\n\n\nA bit more about R projects\n\nTo see the power of projects, select File &gt; Close Project and Don’t Save the workspace image. Then, select File &gt; Recent Projects &gt; SDS264_F24; you will get a clean Environment and Console once again, but History shows the commands you ran by hand, active Rmd and qmd files appear in the Source panel, and Files contains the Rmd, qmd, html, and csv files produced by your last session. And you can stage, commit and push the changes and the new file to GitHub!",
    "crumbs": [
      "Intro to GitHub"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MSCS 264: Data Science 2 (Fall 2024)",
    "section": "",
    "text": "Qurato\n\n\n\n\n\n\n\ntidyverse\n\n\n\n\n\n\nKey links for SDS 264\n\nCourse syllabus\nRStudio server\nmoodle\nGitHub source code for this website"
  },
  {
    "objectID": "tech_setup.html",
    "href": "tech_setup.html",
    "title": "Tech Setup",
    "section": "",
    "text": "Ideally before class on Thurs Sep 5, and definitely before class on Tues Sep 10, you should follow these instructions to set up the software that we’ll be using throughout the semester. Even if you’ve already downloaded both R and RStudio, you’ll want to re-download to make sure that you have the most current versions.\n\nRequired: Download R and RStudio\n\nFIRST: Download R here.\n\nIn the top section, you will see three links “Download R for …”\nChoose the link that corresponds to your computer.\nAs of July 24, 2024, the latest version of R is 4.4.1 (“Race for Your Life”).\n\nSECOND: Download RStudio here.\n\nClick the button under step 2 to install the version of RStudio recommended for your computer.\nAs of July 24, 2024, the latest version of RStudio is 2024.04.2 (Build 764).\n\nTHIRD: Check that when you go to File &gt; New Project &gt; New Directory, you see “Quarto Website” as an option.\n\n\nSuggested: Watch this video from Lisa Lendway at Macalester describing key configuration options for RStudio.\n\nSuggested: Change the default file download location for your internet browser.\n\nGenerally by default, internet browsers automatically save all files to the Downloads folder on your computer. In that case, you have to grab files from Downloads and move them to a more appropriate storage spot. You can change this option so that your browser asks you where to save each file before downloading it.\nThis page has information on how to do this for the most common browsers.\n\n\nRequired: Install required packages.\n\nAn R package is an extra bit of functionality that will help us in our data analysis efforts in a variety of ways. Many contributors create open source packages that can be added to base R to perform certain tasks in new and better ways.\nFor now, we’ll just make sure the tidyverse package is installed. Open RStudio and click on the Packages tab in the bottom right pane. Click the Install button and type “tidyverse” (without quotes) in the pop-up box. Click the Install button at the bottom of the pop-up box.\nYou will see a lot of text from status messages appearing in the Console as the packages are being installed. Wait until you see the &gt; again.\nEnter the command library(tidyverse) in the Console and hit Enter.\n\nQuit RStudio. You’re done setting up!\n\n\nOptional: For a refresher on RStudio features, watch this video. It also shows you how to customize the layout and color scheme of RStudio.",
    "crumbs": [
      "Tech Setup"
    ]
  }
]