[
  {
    "objectID": "tech_setup.html",
    "href": "tech_setup.html",
    "title": "Tech Setup",
    "section": "",
    "text": "Ideally before class on Thurs Feb 8, and definitely before class on Tues Feb 13, you should follow these instructions to set up the software that we’ll be using throughout the semester. Even if you’ve already downloaded both R and RStudio, you’ll want to re-download to make sure that you have the most current versions.\n\nRequired: Download R and RStudio\n\nFIRST: Download R here.\n\nIn the top section, you will see three links “Download R for …”\nChoose the link that corresponds to your computer.\nAs of Feb 1, 2024, the latest version of R is 4.3.2 (“Eye Holes”).\n\nSECOND: Download RStudio here.\n\nClick the button under step 2 to install the version of RStudio recommended for your computer.\nAs of Feb 1, 2024, the latest version of RStudio is 2023.12.1 (Build 402).\n\nTHIRD: Check that when you go to File &gt; New Project &gt; New Directory, you see “Quarto Website” as an option.\n\n\nSuggested: Watch this video from Lisa Lendway at Macalester describing key configuration options for RStudio.\n\nSuggested: Change the default file download location for your internet browser.\n\nGenerally by default, internet browsers automatically save all files to the Downloads folder on your computer. In that case, you have to grab files from Downloads and move them to a more appropriate storage spot. You can change this option so that your browser asks you where to save each file before downloading it.\nThis page has information on how to do this for the most common browsers.\n\n\nRequired: Install required packages.\n\nAn R package is an extra bit of functionality that will help us in our data analysis efforts in a variety of ways. Many contributors create open source packages that can be added to base R to perform certain tasks in new and better ways.\nFor now, we’ll just make sure the tidyverse package is installed. Open RStudio and click on the Packages tab in the bottom right pane. inside the Console pane (by default, the bottom left pane). Click the Install button and type “tidyverse” (without quotes) in the pop-up box. Click the Install button at the bottom of the pop-up box.\nYou will see a lot of text from status messages appearing in the Console as the packages are being installed. Wait until you see the &gt; again.\nEnter the command library(tidyverse) in the Console and hit Enter.\n\nQuit RStudio. You’re done setting up!\n\n\nOptional: For a refresher on RStudio features, watch this video. It also shows you how to customize the layout and color scheme of RStudio."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MSCS 264: Data Science 2 (Spring 2024)",
    "section": "",
    "text": "Course syllabus\nRStudio server\nmoodle"
  },
  {
    "objectID": "index.html#feb-8",
    "href": "index.html#feb-8",
    "title": "MSCS 264: Data Science 2 (Spring 2024)",
    "section": "Feb 8",
    "text": "Feb 8\nTo do before class on Thursday:\n\nSet up R and RStudio using these instructions."
  },
  {
    "objectID": "01_review164_key.html",
    "href": "01_review164_key.html",
    "title": "Review of Data Science 1",
    "section": "",
    "text": "Determinants of COVID vaccination rates\nA recent Stat 272 project examined determinants of covid vaccination rates at the county level. Our data set contains 3053 rows (1 for each county in the US) and 14 columns; here is a quick description of the variables we’ll be using:\n\nstate = state the county is located in\ncounty = name of the county\nregion = region the state is located in\nmetro_status = Is the county considered “Metro” or “Non-metro”?\nrural_urban_code = from 1 (most urban) to 9 (most rural)\nperc_complete_vac = percent of county completely vaccinated as of 11/9/21\ntot_pop = total population in the county\nvotes_Trump = number of votes for Trump in the county in 2020\nvotes_Biden = number of votes for Biden in the county in 2020\nperc_Biden = percent of votes for Biden in the county in 2020\ned_somecol_perc = percent with some education beyond high school (but not a Bachelor’s degree)\ned_bachormore_perc = percent with a Bachelor’s degree or more\nunemployment_rate_2020 = county unemployment rate in 2020\nmedian_HHincome_2019 = county’s median household income in 2019\n\n\nConsider only Minnesota and its surrounding states (Iowa, Wisconsin, North Dakota, and South Dakota). We want to examine the relationship between the percentage who voted for Biden and the percentage of complete vaccinations by state. Generate two plots to examine this relationship:\n\n\nA scatterplot with points and smoothers colored by state. Make sure the legend is ordered in a meaningful way, and include good labels on your axes and your legend. Also leave off the error bars from your smoothers.\nOne plot per state containing a scatterplot and a smoother.\n\nDescribe which plot you prefer and why. What can you learn from your preferred plot?\n\n# Plot a\nvaccine_data |&gt;\n  filter(state %in% c(\"Minnesota\", \"Iowa\", \"Wisconsin\", \n                      \"North Dakota\", \"South Dakota\")) |&gt;\n  ggplot(mapping = aes(x = perc_Biden, y = perc_complete_vac, \n            color = fct_reorder2(state, perc_Biden, perc_complete_vac))) +\n    geom_point() +\n    geom_smooth(se = FALSE) +\n    labs(color = \"State\", \n         x = \"Percent of Biden votes\",\n         y = \"Percent completely vaccinated\")\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n# Plot b\nvaccine_data |&gt;\n  filter(state %in% c(\"Minnesota\", \"Iowa\", \"Wisconsin\", \n                      \"North Dakota\", \"South Dakota\")) |&gt;\n  ggplot(mapping = aes(x = perc_Biden, y = perc_complete_vac, color = state)) +\n    geom_point() +\n    geom_smooth() +\n    facet_wrap(~ state) +\n    labs(color = \"State\", \n         x = \"Percent of Biden votes\",\n         y = \"Percent completely vaccinated\")\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nI kind of like the 5 states on a single plot because it’s easier to compare states in terms of their relative levels of vaccination and the strength of the positive relationship. From this plot, we see trends like a leveling out in North and South Dakota and the high vaccination rates in Biden-leaning Wisconsin counties.\n\nWe wish to compare the proportions of counties in each region with median household income above the national median ($69,560).\n\n\nFill in the blanks below to produce a segmented bar plot with regions ordered from highest proportion above the median to lowest.\n\nsee below\n\nCreate a table of proportions by region to illustrate that your bar plot in (a) is in the correct order (you should find two regions that are really close when you just try to eyeball differences).\n\nsee below\n\nExplain why we can replace fct_relevel(region, FILL IN CODE) with\n\nmutate(region_sort = fct_reorder(region, median_HHincome_2019 &lt; 69560, .fun = mean))\nbut not\nmutate(region_sort = fct_reorder(region, median_HHincome_2019 &lt; 69560))\nSince median_HHincome_2019 &lt; 69560 is a logical (TRUE/FALSE) variable, taking the mean over all counties in a region produces a proportion, but taking a median will pick off just the one county in the middle, which is FALSE (0) in all regions, so ordering remains in the default order (alphabetical).\n\nvaccine_data |&gt;\n  mutate(HHincome_vs_national = ifelse(median_HHincome_2019 &lt; 69560, FILL IN CODE)) |&gt;\n  mutate(region_sort = fct_relevel(region, FILL IN CODE)) |&gt;\n  ggplot(mapping = aes(x = region_sort, fill = HHincome_vs_national)) +\n    geom_bar(position = \"fill\")\n\n\n# Part a\nvaccine_data |&gt;\n  mutate(HHincome_vs_national = ifelse(median_HHincome_2019 &lt; 69560, \n                                       \"below median\", \"above median\")) |&gt;\n  mutate(region_sort = fct_relevel(region, \"Northeast\", \"West\", \n                                   \"Midwest\", \"South\")) |&gt;\n  ggplot(mapping = aes(x = region_sort, fill = HHincome_vs_national)) +\n    geom_bar(position = \"fill\")\n\n\n\n# Part b\nvaccine_data |&gt;\n  mutate(HHincome_vs_national = ifelse(median_HHincome_2019 &lt; 69560, \n                                     \"Below median\", \"Above median\")) |&gt;\n  group_by(region) |&gt;\n  summarise(prop_above = mean(HHincome_vs_national == \"Above median\"))\n\n# A tibble: 4 × 2\n  region    prop_above\n  &lt;chr&gt;          &lt;dbl&gt;\n1 Midwest       0.0974\n2 Northeast     0.300 \n3 South         0.0962\n4 West          0.248 \n\n# Part c\nvaccine_data |&gt;\n  mutate(HHincome_vs_national = ifelse(median_HHincome_2019 &lt; 69560, \n                                     \"Below median\", \"Above median\")) |&gt;\n  mutate(region_sort = fct_reorder(region, median_HHincome_2019 &lt; 69560, \n                                   .fun = mean)) |&gt;\n  ggplot(mapping = aes(x = region_sort, fill = HHincome_vs_national)) +\n    geom_bar(position = \"fill\")\n\n\n\nvaccine_data |&gt;\n  mutate(HHincome_vs_national = ifelse(median_HHincome_2019 &lt; 69560, \n                                     \"Below median\", \"Above median\")) |&gt;\n  mutate(region_sort = fct_reorder(region, median_HHincome_2019 &lt; 69560)) |&gt;\n  ggplot(mapping = aes(x = region_sort, fill = HHincome_vs_national)) +\n    geom_bar(position = \"fill\")\n\n\n\n\n\nWe want to examine the distribution of total county populations and then see how it’s related to vaccination rates.\n\n\nCarefully and thoroughly explain why the two histograms below provide different plots.\n\n\nvaccine_data |&gt;\n  mutate(tot_pop_millions = tot_pop / 1000000) |&gt;\n  ggplot(mapping = aes(x = tot_pop_millions)) +\n    geom_histogram(bins = 40) +\n    labs(x = \"Total population in millions\")\n\n\n\nvaccine_data |&gt;\n  mutate(tot_pop_millions = tot_pop %/% 1000000) |&gt;\n  ggplot(mapping = aes(x = tot_pop_millions)) +\n    geom_histogram(bins = 40) +\n    labs(x = \"Total population in millions\")\n\n\n\n\nThe first plot has a continuous range of decimals (e.g. 700,000 -&gt; 0.7, 1,360,000 -&gt; 1.36), while the second plot just picks off the millions place (e.g. 700,000 -&gt; 0, 1,360,000 -&gt; 1). So the second plot only shows integers 0, 1, 2, …\n\nFind the top 5 counties in terms of total population.\n\n\nvaccine_data |&gt;\n  arrange(desc(tot_pop)) |&gt;\n  slice_head(n = 5) |&gt;\n  print(width = Inf)\n\n# A tibble: 5 × 14\n  state      county             region  metro_status rural_urban_code\n  &lt;chr&gt;      &lt;chr&gt;              &lt;chr&gt;   &lt;chr&gt;                   &lt;dbl&gt;\n1 California Los Angeles County West    Metro                       1\n2 Illinois   Cook County        Midwest Metro                       1\n3 Texas      Harris County      South   Metro                       1\n4 Arizona    Maricopa County    West    Metro                       1\n5 California San Diego County   West    Metro                       1\n  perc_complete_vac  tot_pop votes_Trump votes_Biden perc_Biden ed_somecol_perc\n              &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;\n1              62.6 10039107     1145530     3028885       71.0            26.0\n2              63.6  5150233      558269     1725973       74.4            25.2\n3              56.6  4713325      700630      918193       56.0            26.6\n4              50.5  4485414      995665     1040774       50.3            32.6\n5              52.6  3338330      600094      964650       60.2            30.4\n  ed_bachormore_perc unemployment_rate_2020 median_HHincome_2019\n               &lt;dbl&gt;                  &lt;dbl&gt;                &lt;dbl&gt;\n1               32.5                   12.8                72721\n2               38.8                   11.1                69375\n3               31.5                    8.9                61638\n4               32.7                    7.4                68634\n5               38.8                    9.2                83576\n\n\n\nPlot a histogram of logged population and describe this distribution.\n\n\nvaccine_data |&gt;\n  mutate(log_pop = log(tot_pop)) |&gt;\n  ggplot(mapping = aes(x = log_pop)) +\n    geom_histogram(bins = 40)\n\n\n\n\nThis looks like a normal, bell-shaped, symmetric distribution centered just above 10.\n\nPlot the relationship between log population and percent vaccinated using separate colors for Metro and Non-metro counties (be sure there’s no 3rd color used for NAs). Reduce the size and transparency of each point to make the plot more readable. Describe what you can learn from this plot.\n\n\nvaccine_data |&gt;\n  count(metro_status)\n\n# A tibble: 3 × 2\n  metro_status     n\n  &lt;chr&gt;        &lt;int&gt;\n1 Metro         1157\n2 Non-metro     1895\n3 &lt;NA&gt;             1\n\nvaccine_data |&gt;\n  filter(!is.na(metro_status)) |&gt;\n  mutate(log_pop = log(tot_pop)) |&gt;\n  ggplot(mapping = aes(x = log_pop, y = perc_complete_vac, \n                       color = metro_status)) +\n    geom_point(size = .5, alpha = .5) +\n    geom_smooth(method = \"lm\", se = FALSE)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nWe see Metro counties tend to have higher populations, and that each 1 unit increase in log population is associated with a larger increase in vaccination rates for Metro than for Non-metro counties.\n\nProduce 3 different plots for illustrating the relationship between the rural_urban_code and percent vaccinated. Hint: you can sometimes turn numeric variables into categorical variables for plotting purposes (e.g. as.factor(), ifelse()).\n\nState your favorite plot, why you like it better than the other two, and what you can learn from your favorite plot.\n\nvaccine_data |&gt;\n  ggplot(mapping = aes(x = rural_urban_code, y = perc_complete_vac)) +\n    geom_jitter() +\n    geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nvaccine_data |&gt;\n  ggplot(mapping = aes(x = as.factor(rural_urban_code), y = perc_complete_vac)) +\n    geom_boxplot()\n\n\n\nvaccine_data |&gt;\n  ggplot(mapping = aes(x = as.factor(rural_urban_code), y = perc_complete_vac)) +\n    geom_violin()\n\n\n\nvaccine_data |&gt;\n  ggplot(mapping = aes(x = as.factor(rural_urban_code), y = perc_complete_vac)) +\n    geom_violin() +\n    geom_boxplot()\n\n\n\nvaccine_data |&gt;\n  ggplot(mapping = aes(x = as.factor(rural_urban_code), \n                       fill = perc_complete_vac &gt; 50)) +\n    geom_bar(position = \"fill\")\n\n\n\n\nI kind of like the segmented bar plot. While you lose information by turning vaccination rate into a simple Above 50 / Below 50, the story is pretty clear - that the more urban a county is, the more likely its vaccination rate is above 50 percent.\n\nBEFORE running the code below, sketch the plot that will be produced by R. AFTER running the code, describe what conclusion(s) can we draw from this plot?\n\n\nvaccine_data |&gt;\n  filter(!is.na(perc_Biden)) |&gt;\n  mutate(big_states = fct_lump(state, n = 10)) |&gt;\n  group_by(big_states) |&gt;\n  summarize(IQR_Biden = IQR(perc_Biden)) |&gt;\n  mutate(big_states = fct_reorder(big_states, IQR_Biden)) |&gt;\n  ggplot() + \n    geom_point(aes(x = IQR_Biden, y = big_states))\n\n\n\n\nVirginia has the most spread among its counties (as measured by IQR) in Biden voting percentages, while Missouri and Tennessee have the least, among the 10 states with the most counties.\n\nIn this question we will focus only on the 12 states in the Midwest (i.e. where region == “Midwest”).\n\n\nCreate a tibble with the following information for each state. Order states from least to greatest state population.\n\n\nnumber of different rural_urban_codes represented among the state’s counties (there are 9 possible)\ntotal state population\nproportion of Metro counties\nmedian unemployment rate\n\n\nUse your tibble in (a) to produce a plot of the relationship between proportion of Metro counties and median unemployment rate. Points should be colored by the number of different rural_urban_codes in a state, but a single linear trend should be fit to all points. What can you conclude from the plot?\n\n\nvaccine_data |&gt;\n  filter(region == \"Midwest\") |&gt;\n  group_by(state) |&gt;\n  summarise(diff_urban_rural_cats = n_distinct(rural_urban_code),\n            state_pop = sum(tot_pop),\n            prop_metro = mean(metro_status == \"Metro\"),\n            median_unemp = median(unemployment_rate_2020)) |&gt;\n  arrange(state_pop)\n\n# A tibble: 12 × 5\n   state        diff_urban_rural_cats state_pop prop_metro median_unemp\n   &lt;chr&gt;                        &lt;int&gt;     &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;\n 1 North Dakota                     6    762062      0.113         4.4 \n 2 South Dakota                     6    884659      0.121         4.35\n 3 Nebraska                         6   1261262      0.292         3.3 \n 4 Kansas                           9   2913314      0.181         4.1 \n 5 Iowa                             8   3155070      0.212         4.6 \n 6 Minnesota                        9   5639632      0.310         5.6 \n 7 Wisconsin                        8   5822434      0.361         6.3 \n 8 Missouri                         9   6137428      0.296         5.6 \n 9 Indiana                          8   6732219      0.478         6.5 \n10 Michigan                         9   9986857      0.313         9.1 \n11 Ohio                             7  11689100      0.432         8.1 \n12 Illinois                         9  12671821      0.392         7.75\n\nvaccine_data |&gt;\n  filter(region == \"Midwest\") |&gt;\n  group_by(state) |&gt;\n  summarise(diff_urban_rural_cats = n_distinct(rural_urban_code),\n            state_pop = sum(tot_pop),\n            prop_metro = mean(metro_status == \"Metro\"),\n            median_unemp = median(unemployment_rate_2020)) |&gt;\n  ggplot(mapping = aes(x = prop_metro, y = median_unemp)) +\n    geom_point(mapping = aes(color = diff_urban_rural_cats)) +\n    geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nMidwestern states with a high proportion of Metro counties tend to have higher median unemployment rates. States with a lower number of different urban/rural codes tend to have lower median unemployment rates.\n\nGenerate an appropriate plot to compare vaccination rates between two subregions of the US: New England (which contains the states Maine, Vermont, New Hampshire, Massachusetts, Connecticut, Rhode Island) and the Upper Midwest (which, according to the USGS, contains the states Minnesota, Wisconsin, Michigan, Illinois, Indiana, and Iowa). What can you conclude from your plot?\n\n\nvaccine_data |&gt;\n  mutate(two_regions = fct_collapse(state, \n    \"New England\" = c(\"Maine\", \"Vermont\", \"New Hampshire\", \"Massachusetts\",\n                      \"Connecticut\", \"Rhode Island\"),\n    \"Upper Midwest\" = c(\"Minnesota\", \"Wisconsin\", \"Michigan\", \"Illinois\",\n                        \"Indiana\", \"Iowa\"))) |&gt;\n  filter(two_regions == \"New England\" | two_regions == \"Upper Midwest\") |&gt;\n  ggplot() +\n    geom_boxplot(mapping = aes(x = perc_complete_vac, y = two_regions))\n\n\n\n\nVaccination rates are generally higher in New England counties (median 63 percent) than in the Upper Midwest (median 50 percent). The 25th percentile in New England is higher than the 75th percentile in the Upper Midwest.\nIn this next section, we consider a few variables that could have been included in our data set, but were NOT. Thus, you won’t be able to write and test code, but you nevertheless should be able to use your knowledge of the tidyverse to answer these questions.\nHere are the hypothetical variables:\n\nHR_party = party of that county’s US Representative (Republican, Democrat, Independent, Green, or Libertarian)\npeople_per_MD = number of residents per doctor (higher values = fewer doctors)\nperc_over_65 = percent of residents over 65 years old\nperc_white = percent of residents who identify as white\n\n\nHypothetical R chunk #1:\n\n\n# Hypothetical R chunk 1\ntemp &lt;- vaccine_data |&gt;\n  mutate(new_perc_vac = ifelse(perc_complete_vac &gt; 95, NA, perc_complete_vac),\n         MD_group = cut_number(people_per_MD, 3)) |&gt;\n  group_by(MD_group) |&gt;\n  summarise(n = n(),\n            mean_perc_vac = mean(new_perc_vac, na.rm = TRUE),\n            mean_white = mean(perc_white, na.rm = TRUE))\n\n\nDescribe the tibble temp created above. What would be the dimensions? What do rows and columns represent?\n\n3 rows (for low, middle, high people per MD) and 4 columns (group name, number of counties in that group, average vaccination rate, and average percent white)\n\nWhat would happen if we replaced new_perc_vac = ifelse(perc_complete_vac &gt; 95, NA, perc_complete_vac) with new_perc_vac = ifelse(perc_complete_vac &gt; 95, perc_complete_vac, NA)?\n\nAll vaccination rates below 95 would be set to missing, so mean_perc_vac would be based only on counties with rates of 95 percent or higher.\n\nWhat would happen if we replaced mean_white = mean(perc_white, na.rm = TRUE) with mean_white = mean(perc_white)?\n\nmean_white for a group would be reported as NA if even 1 county in that group had a missing perc_white.\n\nWhat would happen if we removed group_by(MD_group)?\n\nWe’d get a 1 x 3 tibble with summary statistics across all counties.\n\nHypothetical R chunk #2:\n\n\n# Hypothetical R chunk 2\nggplot(data = vaccine_data) +\n  geom_point(mapping = aes(x = perc_over_65, y = perc_complete_vac, \n                           color = HR_party)) +\n  geom_smooth()\n\ntemp &lt;- vaccine_data |&gt;\n  group_by(HR_party) |&gt;\n  summarise(var1 = n()) |&gt;\n  arrange(desc(var1)) |&gt;\n  slice_head(n = 3)\n\nvaccine_data |&gt;\n  ggplot(mapping = aes(x = fct_reorder(HR_party, perc_over_65, .fun = median), \n                       y = perc_over_65)) +\n    geom_boxplot()\n\n\nWhy would the first plot produce an error?\n\nThere is no x and y variables defined for the smoother.\n\nDescribe the tibble temp created above. What would be the dimensions? What do rows and columns represent?\n\n3 rows (top 3 parties in terms of counties represented) and 2 columns (party name and number of counties represented)\n\nWhat would happen if we replaced fct_reorder(HR_party, perc_over_65, .fun = median) with HR_party?\n\nThe boxplot would feature parties in alphabetical order rather than increasing medians.\n\nHypothetical R chunk #3:\n\n\n# Hypothetical R chunk 3\nvaccine_data |&gt;\n  filter(!is.na(people_per_MD)) |&gt;\n  mutate(state_lump = fct_lump(state, n = 4)) |&gt;\n  group_by(state_lump, rural_urban_code) |&gt;\n  summarise(mean_people_per_MD = mean(people_per_MD)) |&gt;\n  ggplot(mapping = aes(x = rural_urban_code, y = mean_people_per_MD, \n      colour = fct_reorder2(state_lump, rural_urban_code, mean_people_per_MD))) +\n    geom_line()\n\n\nDescribe the tibble piped into the ggplot above. What would be the dimensions? What do rows and columns represent?\n\nJust under 45 rows (one for each combination of the 4 top states plus other and the 9 rural_urban_codes, although not all states have all 9 codes), and 3 columns (state, rural/urban code, and mean number of people per MD)\n\nCarefully describe the plot created above.\n\n5 differently colored lines showing rural/urban code vs average people per MD for counties in the top 4 states (plus Other). Points are connected with straight lines segments, and the legend matches the ordering of average people per MD at a rural/urban code of 9.\n\nWhat would happen if we removed filter(!is.na(people_per_MD))?\n\nIf any counties have missing people per MD, we’d have a few state/code combinations with missing averages.\n\nWhat would happen if we replaced fct_reorder2(state_lump, rural_urban_code, mean_people_per_MD) with state_lump?\n\nStates would be in default ordering - usually alphabetical"
  },
  {
    "objectID": "01_review164.html",
    "href": "01_review164.html",
    "title": "Review of Data Science 1",
    "section": "",
    "text": "Determinants of COVID vaccination rates\nA recent Stat 272 project examined determinants of covid vaccination rates at the county level. Our data set contains 3053 rows (1 for each county in the US) and 14 columns; here is a quick description of the variables we’ll be using:\n\nstate = state the county is located in\ncounty = name of the county\nregion = region the state is located in\nmetro_status = Is the county considered “Metro” or “Non-metro”?\nrural_urban_code = from 1 (most urban) to 9 (most rural)\nperc_complete_vac = percent of county completely vaccinated as of 11/9/21\ntot_pop = total population in the county\nvotes_Trump = number of votes for Trump in the county in 2020\nvotes_Biden = number of votes for Biden in the county in 2020\nperc_Biden = percent of votes for Biden in the county in 2020\ned_somecol_perc = percent with some education beyond high school (but not a Bachelor’s degree)\ned_bachormore_perc = percent with a Bachelor’s degree or more\nunemployment_rate_2020 = county unemployment rate in 2020\nmedian_HHincome_2019 = county’s median household income in 2019\n\n\nConsider only Minnesota and its surrounding states (Iowa, Wisconsin, North Dakota, and South Dakota). We want to examine the relationship between the percentage who voted for Biden and the percentage of complete vaccinations by state. Generate two plots to examine this relationship:\n\n\nA scatterplot with points and smoothers colored by state. Make sure the legend is ordered in a meaningful way, and include good labels on your axes and your legend. Also leave off the error bars from your smoothers.\nOne plot per state containing a scatterplot and a smoother.\n\nDescribe which plot you prefer and why. What can you learn from your preferred plot?\n\nWe wish to compare the proportions of counties in each region with median household income above the national median ($69,560).\n\n\nFill in the blanks below to produce a segmented bar plot with regions ordered from highest proportion above the median to lowest.\nCreate a table of proportions by region to illustrate that your bar plot in (a) is in the correct order (you should find two regions that are really close when you just try to eyeball differences).\nExplain why we can replace fct_relevel(region, FILL IN CODE) with\n\nmutate(region_sort = fct_reorder(region, median_HHincome_2019 &lt; 69560, .fun = mean))\nbut not\nmutate(region_sort = fct_reorder(region, median_HHincome_2019 &lt; 69560))\n\nvaccine_data |&gt;\n  mutate(HHincome_vs_national = ifelse(median_HHincome_2019 &lt; 69560, FILL IN CODE)) |&gt;\n  mutate(region_sort = fct_relevel(region, FILL IN CODE)) |&gt;\n  ggplot(mapping = aes(x = region_sort, fill = HHincome_vs_national)) +\n    geom_bar(position = \"fill\")\n\n\nWe want to examine the distribution of total county populations and then see how it’s related to vaccination rates.\n\n\nCarefully and thoroughly explain why the two histograms below provide different plots.\n\n\nvaccine_data |&gt;\n  mutate(tot_pop_millions = tot_pop / 1000000) |&gt;\n  ggplot(mapping = aes(x = tot_pop_millions)) +\n    geom_histogram(bins = 40) +\n    labs(x = \"Total population in millions\")\n\n\n\nvaccine_data |&gt;\n  mutate(tot_pop_millions = tot_pop %/% 1000000) |&gt;\n  ggplot(mapping = aes(x = tot_pop_millions)) +\n    geom_histogram(bins = 40) +\n    labs(x = \"Total population in millions\")\n\n\n\n\n\nFind the top 5 counties in terms of total population.\nPlot a histogram of logged population and describe this distribution.\nPlot the relationship between log population and percent vaccinated using separate colors for Metro and Non-metro counties (be sure there’s no 3rd color used for NAs). Reduce the size and transparency of each point to make the plot more readable. Describe what you can learn from this plot.\n\n\nProduce 3 different plots for illustrating the relationship between the rural_urban_code and percent vaccinated. Hint: you can sometimes turn numeric variables into categorical variables for plotting purposes (e.g. as.factor(), ifelse()).\n\nState your favorite plot, why you like it better than the other two, and what you can learn from your favorite plot.\n\nBEFORE running the code below, sketch the plot that will be produced by R. AFTER running the code, describe what conclusion(s) can we draw from this plot?\n\n\nvaccine_data |&gt;\n  filter(!is.na(perc_Biden)) |&gt;\n  mutate(big_states = fct_lump(state, n = 10)) |&gt;\n  group_by(big_states) |&gt;\n  summarize(IQR_Biden = IQR(perc_Biden)) |&gt;\n  mutate(big_states = fct_reorder(big_states, IQR_Biden)) |&gt;\n  ggplot() + \n    geom_point(aes(x = IQR_Biden, y = big_states))\n\n\n\n\n\nIn this question we will focus only on the 12 states in the Midwest (i.e. where region == “Midwest”).\n\n\nCreate a tibble with the following information for each state. Order states from least to greatest state population.\n\n\nnumber of different rural_urban_codes represented among the state’s counties (there are 9 possible)\ntotal state population\nproportion of Metro counties\nmedian unemployment rate\n\n\nUse your tibble in (a) to produce a plot of the relationship between proportion of Metro counties and median unemployment rate. Points should be colored by the number of different rural_urban_codes in a state, but a single linear trend should be fit to all points. What can you conclude from the plot?\n\n\nGenerate an appropriate plot to compare vaccination rates between two subregions of the US: New England (which contains the states Maine, Vermont, New Hampshire, Massachusetts, Connecticut, Rhode Island) and the Upper Midwest (which, according to the USGS, contains the states Minnesota, Wisconsin, Michigan, Illinois, Indiana, and Iowa). What can you conclude from your plot?\n\nIn this next section, we consider a few variables that could have been included in our data set, but were NOT. Thus, you won’t be able to write and test code, but you nevertheless should be able to use your knowledge of the tidyverse to answer these questions.\nHere are the hypothetical variables:\n\nHR_party = party of that county’s US Representative (Republican, Democrat, Independent, Green, or Libertarian)\npeople_per_MD = number of residents per doctor (higher values = fewer doctors)\nperc_over_65 = percent of residents over 65 years old\nperc_white = percent of residents who identify as white\n\n\nHypothetical R chunk #1:\n\n\n# Hypothetical R chunk 1\ntemp &lt;- vaccine_data |&gt;\n  mutate(new_perc_vac = ifelse(perc_complete_vac &gt; 95, NA, perc_complete_vac),\n         MD_group = cut_number(people_per_MD, 3)) |&gt;\n  group_by(MD_group) |&gt;\n  summarise(n = n(),\n            mean_perc_vac = mean(new_perc_vac, na.rm = TRUE),\n            mean_white = mean(perc_white, na.rm = TRUE))\n\n\nDescribe the tibble temp created above. What would be the dimensions? What do rows and columns represent?\nWhat would happen if we replaced new_perc_vac = ifelse(perc_complete_vac &gt; 95, NA, perc_complete_vac) with new_perc_vac = ifelse(perc_complete_vac &gt; 95, perc_complete_vac, NA)?\nWhat would happen if we replaced mean_white = mean(perc_white, na.rm = TRUE) with mean_white = mean(perc_white)?\nWhat would happen if we removed group_by(MD_group)?\n\n\nHypothetical R chunk #2:\n\n\n# Hypothetical R chunk 2\nggplot(data = vaccine_data) +\n  geom_point(mapping = aes(x = perc_over_65, y = perc_complete_vac, \n                           color = HR_party)) +\n  geom_smooth()\n\ntemp &lt;- vaccine_data |&gt;\n  group_by(HR_party) |&gt;\n  summarise(var1 = n()) |&gt;\n  arrange(desc(var1)) |&gt;\n  slice_head(n = 3)\n\nvaccine_data |&gt;\n  ggplot(mapping = aes(x = fct_reorder(HR_party, perc_over_65, .fun = median), \n                       y = perc_over_65)) +\n    geom_boxplot()\n\n\nWhy would the first plot produce an error?\nDescribe the tibble temp created above. What would be the dimensions? What do rows and columns represent?\nWhat would happen if we replaced fct_reorder(HR_party, perc_over_65, .fun = median) with HR_party?\n\n\nHypothetical R chunk #3:\n\n\n# Hypothetical R chunk 3\nvaccine_data |&gt;\n  filter(!is.na(people_per_MD)) |&gt;\n  mutate(state_lump = fct_lump(state, n = 4)) |&gt;\n  group_by(state_lump, rural_urban_code) |&gt;\n  summarise(mean_people_per_MD = mean(people_per_MD)) |&gt;\n  ggplot(mapping = aes(x = rural_urban_code, y = mean_people_per_MD, \n      colour = fct_reorder2(state_lump, rural_urban_code, mean_people_per_MD))) +\n    geom_line()\n\n\nDescribe the tibble piped into the ggplot above. What would be the dimensions? What do rows and columns represent?\nCarefully describe the plot created above.\nWhat would happen if we removed filter(!is.na(people_per_MD))?\nWhat would happen if we replaced fct_reorder2(state_lump, rural_urban_code, mean_people_per_MD) with state_lump?"
  },
  {
    "objectID": "github_website.html",
    "href": "github_website.html",
    "title": "Using GitHub to Create a Personal Website",
    "section": "",
    "text": "Version Control (GitHub)\nIn order to collaborate on an R project (or any coding project in general), data scientists typically use a version control system like GitHub. With GitHub, you never have to save files as Final.docx, Final2.docx, Newfinal.docx, RealFinal.docx, nothisisreallyit.docx, etc. You update code like .qmd and .Rmd and data files, recording descriptions of any changes. Then if you ever want to go back to an earlier version, GitHub can facilitate that. Or if you want to make your work public, others can see it and even suggest changes, but you are ultimately in control of any changes that get made.\nAnd, you can have multiple collaborators with access to the same set of files. While it can be dicey if multiple people have the file open and make changes at the same time, if you do this with GitHub, it is at least POSSIBLE to get it straightened out, and the second person who tries to save will get warned. If you are both just using a common folder on RStudio, you can easily write over and erase each other’s work. (If you use a common folder, be sure that one person is editing at a time to prevent this).\nIn order to begin to get familiar with GitHub, we will use it to create a personal website.\n\n\nGetting started on GitHub and connecting to RStudio\n\nCreate a GitHub account at github.com. It’s usually okay to hit “Skip Personalization” at the bottom of the screen after entering an email, username, and password. There are a few bonuses you can get as a student that you might consider.\nObtain a personal access token in GitHub using the following steps:\n\nClick your profile picture/symbol in the upper right of your GitHub page. Then select Settings &gt; Developer settings &gt; Personal access tokens &gt; Tokens (classic).\nClick “Generate new token” and give a descriptive name like “My PAT for RStudio”. Note that the default expiration is 30 days; I did a Custom setting through the end of the semester.\nSelect scopes and permissions; I often select: repo, workflow, gist, and user.\nClick “Generate token”. Copy your personal access token and store it somewhere.\n\nStore your credentials in RStudio using the following steps:\n\nIn the console, type library(credentials). You might have to install the credentials package first.\nThen type set_github_pat(), hit Return, choose the Token option, and copy in your personal access token\n\n\n\n\nCreating an R project (local) that’s connected to GitHub (cloud)\n\nIn your GitHub account, click the \\(+ \\nabla\\) (+down arrow) button near the top right and select New Repository (repo). For a personal website, you might put something like “proback.github.io” for your repository (repo) name, where you should replace proback with your GitHub user name. For other repos, choose simple but descriptive names that should avoid spaces. Be sure Public is checked; often I create Private repositories and turn them Public if I want later, but we know a personal webpage should be Public. Check Add a ReadMe File. Finally hit Create Repository and copy the URL once your repo has been created; the URL should be something like github.com/user_name/user_name.github.io.\nGo into your RStudio and select File &gt; New Project &gt; Version Control &gt; Git. For the repository URL paste in the URL for the repository you just created. A project directory named “user_name.github.io” will be created in your specified folder (which you can navigate to).\n\nNotice that you are now starting with a blank slate! Nothing in the environment or history. Also note where it says your project name in the top right corner.\n\n\nCreating a personal website in RStudio (local)\n\nFollow the instructions here. These instructions use materials from Brianna Heggeseth at Macalester, Joyce Robbins at Columbia, and quarto documentation.\n\n\n\nPushing your work to GitHub (cloud)\n\nWe now want to “push” the changes made in “user_name.github.io” to your GitHub repo (the changes have only been made in your local RStudio for now).\n\nIn the console, type library(credentials)\nThen type set_github_pat(), hit Return, and copy in your personal access token. We do this again because we are in a new project. (These first two steps might not be necessary, but it’s good to make sure.)\nunder the Git tab in the Environment panel, check the boxes in front of all modified files to “stage” your changes. To select a large number of files, check the top box, scroll down to the bottom of the list, and then shift-click the final box\nclick the Commit tab to “commit” your changes (like saving a file locally) along with a message describing the changes you made. GitHub guides you by by showing your old code (red) and new code (green), to make sure you approve of the changes. This first time, all code should be green since we’ve only added new things rather than modifying previously saved files.\n“push” your changes to GitHub (an external website) by clicking the green Up arrow. Refresh your GitHub account to see new files in the user_name.github.io repo!\n\n\n\n\nModifying files that have already been pushed to GitHub\n\nMake a change (anything) to one of your files in RStudio. Now go back under the Git tab and “push” these new changes to GitHub. You’ll have to go through the same process of Stage, Commit, and Push, although this time you’ll see only your newest changes in green when you Commit. Confirm that your changes appear in GitHub.\n\n\n\nPulling work from GitHub\nBefore you start a new session of working on a project in RStudio, you should always Pull changes from GitHub first. Most of the time there will be nothing new, but if a collaborator made changes since the last time you worked on a file, you want to make sure you’re working with the latest and greatest version. If not, you’ll end up trying to Push changes made to an old version, and GitHub will balk and produce Merge Conflict messages. We’ll see how to handle Merge Conflicts later, but it’s a bit of a pain and best avoided!\n\nGo into one of your files on GitHub and hit the Edit icon. Add a line anywhere, and then scroll down to hit Commit Changes. (This is not recommended and for illustrative purposes only! You typically won’t edit directly in GitHub, but we’re emulating what might happen if a collaborator makes changes since the last time you worked on a document.) Now go back to RStudio and, under the Git tab, “Pull” the changes from GitHub into your R project folder. (Use the blue Down arrow). Confirm that your changes now appear in RStudio. Before you start working on the R server, you should always Pull any changes that might have been made on GitHub (especially if you’re working on a team!), since things can get dicey if you try to merge new changes from RStudio with new changes on GitHub.\n\n\n\nA bit more about R projects\n\nTo see the power of projects, select File &gt; Close Project and Don’t Save the workspace image. Then, select File &gt; Recent Projects &gt; user_name.github.io; you will get a clean Environment and Console once again, but History shows the commands you ran by hand, active Rmd and qmd files appear in the Source panel, and Files contains the Rmd, qmd, html, and csv files produced by your last session. And you can stage, commit and push the changes and the new file to GitHub!"
  },
  {
    "objectID": "miniproject1.html",
    "href": "miniproject1.html",
    "title": "Mini-Project 1: Maps",
    "section": "",
    "text": "Guidelines and Rubric TBA"
  }
]