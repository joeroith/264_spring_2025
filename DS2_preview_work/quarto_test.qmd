---
title: "USCOTS workshop: first steps in Quarto and R"
author: "Nicholas Horton (nhorton@amherst.edu)"
date: "2023-05-23"
format: html
editor: source
toc: true
---

This file provides an introduction to Quarto using a motivating example using a spreadsheet from a payroll register from Parsons Paper Company (Holyoke, Massachusetts) from the 1860's that I've hand-transcribed.

Want to explore the page analyzed below? A Shiny app can be found here: https://r.amherst.edu/apps/nhorton/Parsons-Paper/

## Introduction to Quarto

Quarto enables you to weave together content and executable code into a finished document. The visual editor is enabled by default. To add a new top level section heading type `# Title`, `## Title`, or `### Title`. To add a new code chunk select "Insert Chunk" from the `Code` menu. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this (so that code isn't displayed):

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

## Setup

```{r}
#| label: setup
#| include: false
library(mosaic)
library(tidyverse)
library(janitor)
library(broom)
library(knitr)
options(digits = 4)
```

I recommend having a setup chunk that loads the `tidyverse` and `mosaic` packages.
From time to time you will need to add other packages here to add additional functionality. Note that the `include: false` option is specified so neither printing of code or output is displayed.

## Data input

```{r}
#| message: false
register <- readr::read_csv(
  "https://nhorton.people.amherst.edu/stat210/Parsons_page253.csv") |>
  mutate(daily_pay = total / number_days)
glimpse(register)
```

We consider data from page 253 of the register.

## Data summaries + visualization

For those new to R, a number of useful functions are made available through the `mosaic` and `ggformula` packages for summary statistics, graphical displays, and modeling. (Those familiar with `ggplot2` can ignore these commands.)

The mosaic formula interface has several forms:

-   GOAL(\~ X, data = XX) univariate operation

-   GOAL(Y \~ X, data = XX) bivariate operation

-   A variety of GOAL's have been implemented.


```{r}
#| message: false
#| warning: false
#| fig.height: 3
mosaic::tally(~ signature_x, margins = TRUE, data = register)
mosaic::tally(~ signature_x, format = "prop", data = register)
mosaic::favstats(~ number_days, data = register)
```


```{r}
#| message: false
#| warning: false
#| fig.height: 3
#| label: fig-daily
#| fig.cap: "Histogram of daily pay (in 1860's US dollars) for Parsons Paper Company employees"
gf_histogram( ~ daily_pay, data = register)
#ggplot(register, aes(x = daily_pay)) +  # equivalent in ggplot
  #geom_histogram()
```

@fig-daily displays the histogram of daily pay per workday in 1860's dollars.

```{r}
#| message: false
#| warning: false
#| fig.height: 3
#| label: fig-pay
#| fig.cap: "Daily salary per workday (in 1860's US dollars) for Parsons Paper Company employees who couldn't and who could sign their names"
gf_boxplot(daily_pay ~ signature_x, data = register)
#ggplot(register, aes(x = signature_x, y = daily_pay)) +  # ggplot equivalent
  #geom_boxplot()
```

@fig-pay displays side by side boxplots of daily pay for employees who couldn't and employees who could sign their names, respectively.
We can see that the monthly salaries tend to be larger for those who can sign their name (a proxy for literacy).

@tbl-pay displays the records for the  employees with the lowest daily pay.

```{r}
#| label: tbl-pay
#| tbl-cap: "Information available regarding those with the lowest daily pay from page 253 of the Parsons Paper Company register"
lower_pay <- filter(register, daily_pay < 1.5)
lower_pay |>
  select(lastname, firstname, daily_pay, signature_x) |>
  kable()
```

## Modeling

Note that the `lm()` function uses a similar `Y ~ X` syntax.
Here we explore how the daily pay relates to the daily rate variables (`price1` and `price2`).

```{r}
model <- lm(daily_pay ~ I(price1/6) + price2, data = register)
mosaic::msummary(model)
```

@tbl-model provides the same information in a nice table.

If anyone knows anything about 1860's currency (and the odd sixths) I'm all ears.

```{r}
#| warning: false
#| label: tbl-model
#| tbl-cap: "Linear regression model of daily pay as a function of the two price variables"
kable(broom::tidy(model))
```
